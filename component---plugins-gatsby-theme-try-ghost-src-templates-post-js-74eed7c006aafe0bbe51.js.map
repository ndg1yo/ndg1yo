{"version":3,"sources":["webpack:///./node_modules/gatsby-plugin-social9-comment/utils.js","webpack:///./node_modules/gatsby-plugin-social9-comment/components/S9comment.jsx","webpack:///./plugins/gatsby-theme-try-ghost/src/templates/post.js"],"names":["shallowComparison","currentProps","nextProps","propNames","Set","Object","keys","concat","filter","name","element","React","isValidElement","Array","isArray","some","value","length","S9comment","props","embedUrl","componentDidMount","this","loadInstance","shouldComponentUpdate","componentDidUpdate","componentWillUnmount","cleanInstance","src","id","parent","script","window","document","getElementById","reloadInstance","body","createElement","async","appendChild","S9COMMENTS","reset","reload","removeChild","error","undefined","thread","hasChildNodes","firstChild","render","Component","Post","data","location","pageContext","basePath","useOptions","text","get","useLang","post","ghostPost","prevPost","prev","nextPost","next","previewPosts","allGhostPost","edges","readingTime","readingTimeHelper","replace","featImg","featureImageSharp","publicURL","feature_image","fluidFeatureImg","childImageSharp","fluid","postClass","PostClass","tags","isFeatured","isImage","primaryTagCount","toc","childHtmlRehype","tableOfContents","htmlAst","transformedHtml","html","forEach","node","collectionPath","collectionPaths","Fragment","type","Helmet","codeinjection_styles","throttle","isPost","activeClass","sticky","overlay","header","title","primaryTag","primary_tag","posts","className","to","resolveUrl","slug","url","ref","anchorRef","custom_excerpt","authors","map","author","i","key","dateTime","published_at","published_at_pretty","fluidClass","fluidImg","srcImg"],"mappings":"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","file":"component---plugins-gatsby-theme-try-ghost-src-templates-post-js-74eed7c006aafe0bbe51.js","sourcesContent":["import React from 'react'\n\nexport function insertScript(src, id, parent) {\n    const script = window.document.createElement('script')\n    script.async = true\n    script.src = src\n    script.id = id\n    parent.appendChild(script)\n    return script\n}\n\nexport function removeScript(id, parent) {\n    const script = window.document.getElementById(id)\n    if(script) {\n      parent.removeChild(script)\n    }\n}\n\nexport function debounce(func, wait, runOnFirstCall) {\n  let timeout\n  return function () {\n    const context = this\n    const args = arguments\n    const deferredExecution = function () {\n      timeout = null\n      if(!runOnFirstCall) {\n        func.apply(context, args)\n      }\n    }\n    const callNow = runOnFirstCall && !timeout\n    window.clearTimeout(timeout)\n    timeout = setTimeout(deferredExecution, wait)\n    if(callNow) {\n      func.apply(context, args)\n    }\n  }\n}\n\nexport function isReactElement(element) {\n  if (React.isValidElement(element)) {\n    return true\n  } else if (Array.isArray(element)) {\n    return element.some((value) => React.isValidElement(value))\n  }\n  return false\n}\n\nexport function shallowComparison(currentProps, nextProps) {\n  // Perform a comparison of all props, excluding React Elements, to prevent\n  // unnecessary updates\n  const propNames = new Set(Object.keys(currentProps).concat(Object.keys(nextProps)))\n  const changes = [].concat(...propNames).filter((name) => {\n    if (typeof currentProps[name] === 'object') {\n      if (shallowComparison(currentProps[name], nextProps[name])) {\n        return true\n      }\n    } else if (currentProps[name] !== nextProps[name] && !isReactElement(currentProps[name])) {\n      return true\n    }\n  })\n  return changes.length !== 0\n}","import React from 'react'\r\nimport { insertScript, removeScript, shallowComparison } from '../utils'\r\n\r\nexport default class S9comment extends React.Component {\r\n  \r\n  constructor(props) {\r\n    super(props)\r\n    this.embedUrl = `//social9.com/comments/js/commento.js`\r\n  }\r\n  \r\n  componentDidMount() {\r\n    this.loadInstance()\r\n  }\r\n  \r\n  shouldComponentUpdate(nextProps) {\r\n    if (this.props === nextProps) {\r\n      return false\r\n    }\r\n    return shallowComparison(this.props, nextProps)\r\n  }\r\n  \r\n  componentDidUpdate() {\r\n    this.loadInstance()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.cleanInstance()\r\n  }\r\n  \r\n  loadInstance() {\r\n    if (typeof window !== 'undefined' && window.document) {\r\n      if (window.document.getElementById('social9Comments')) {\r\n        this.reloadInstance()\r\n      } else {\r\n        insertScript(this.embedUrl, 'social9Comments', window.document.body)\r\n      }\r\n    }\r\n  }\r\n  \r\n  reloadInstance() {\r\n    if (window && window.S9COMMENTS) {\r\n      window.S9COMMENTS.reset({\r\n        reload: true,\r\n      })\r\n    }\r\n  }\r\n\r\n  cleanInstance() {\r\n    removeScript('social9Comments', window.document.body)\r\n    try {\r\n      delete window.S9COMMENTS\r\n    } catch (error) {\r\n      window.S9COMMENTS = undefined\r\n    }\r\n    const thread = window.document.getElementById('s9comments')\r\n    if (thread) {\r\n      while (thread.hasChildNodes()) {\r\n        thread.removeChild(thread.firstChild)\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id='s9comments'></div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql } from 'gatsby'\nimport { Helmet } from 'react-helmet'\n\nimport { readingTime as readingTimeHelper } from '@tryghost/helpers'\nimport { resolveUrl } from '../utils/routing'\nimport useOptions from '../utils/use-options'\nimport { useLang, get } from '../utils/use-lang'\n\nimport { Layout, HeaderPost, AuthorList, PreviewPosts, ImgSharp, RenderContent } from '../components/common'\nimport { TableOfContents } from '../components/common'\nimport { S9comment } from 'gatsby-plugin-social9-comment'\n\nimport { StickyNavContainer, OverlayContainer } from '../components/common/effects'\nimport { MetaData } from '../components/common/meta'\n\nimport { PostClass } from '../components/common/helpers'\n\n/**\n* Single post view (/:slug)\n*\n* This file renders a single post and loads all the content.\n*\n*/\nconst Post = ({ data, location, pageContext }) => {\n    const { basePath } = useOptions()\n    const text = get(useLang())\n    const post = data.ghostPost\n    const prevPost = data.prev\n    const nextPost = data.next\n    const previewPosts = data.allGhostPost.edges\n    const readingTime = readingTimeHelper(post).replace(`min read`,text(`MIN_READ`))\n    const featImg = post.featureImageSharp && post.featureImageSharp.publicURL || post.feature_image\n    const fluidFeatureImg = post.featureImageSharp && post.featureImageSharp.childImageSharp && post.featureImageSharp.childImageSharp.fluid\n    const postClass = PostClass({ tags: post.tags, isFeatured: featImg, isImage: featImg && true })\n    const primaryTagCount = pageContext.primaryTagCount\n\n    const toc = post.childHtmlRehype && post.childHtmlRehype.tableOfContents || []\n    const htmlAst = post.childHtmlRehype && post.childHtmlRehype.htmlAst\n    const transformedHtml = post.childHtmlRehype && post.childHtmlRehype.html\n\n    // Collection paths must be retrieved from pageContext\n    previewPosts.forEach(({ node }) => node.collectionPath = pageContext.collectionPaths[node.id])\n    if (prevPost) {\n        prevPost.collectionPath = pageContext.collectionPaths[prevPost.id]\n    }\n    if (nextPost) {\n        nextPost.collectionPath = pageContext.collectionPaths[nextPost.id]\n    }\n\n    return (\n        <React.Fragment>\n            <MetaData data={data} location={location} type=\"article\"/>\n            <Helmet>\n                <style type=\"text/css\">{`${post.codeinjection_styles}`}</style>\n            </Helmet>\n            <StickyNavContainer throttle={300} isPost={true} activeClass=\"nav-post-title-active\" render={ sticky => (\n                <OverlayContainer render={ overlay => (\n                    <Layout isPost={true} sticky={sticky} overlay={overlay}\n                        header={<HeaderPost sticky={sticky} title={post.title} overlay={overlay}/>}\n                        previewPosts={<PreviewPosts primaryTag={post.primary_tag} primaryTagCount={primaryTagCount} posts={previewPosts} prev={prevPost} next={nextPost}/>}>\n                        <div className=\"inner\">\n                            <article className={`post-full ${postClass}`}>\n                                <header className=\"post-full-header\">\n                                    { post.primary_tag &&\n                                            <section className=\"post-full-tags\">\n                                                <Link to={resolveUrl(basePath, `/`, post.primary_tag.slug, post.primary_tag.url)}>{post.primary_tag.name}</Link>\n                                            </section>\n                                    }\n\n                                    <h1 ref={sticky && sticky.anchorRef} className=\"post-full-title\">{post.title}</h1>\n\n                                    { post.custom_excerpt &&\n                                        <p className=\"post-full-custom-excerpt\">{post.custom_excerpt}</p>\n                                    }\n\n                                    <div className=\"post-full-byline\">\n                                        <section className=\"post-full-byline-content\">\n                                            <AuthorList authors={post.authors} isPost={true}/>\n\n                                            <section className=\"post-full-byline-meta\">\n                                                <h4 className=\"author-name\">\n                                                    {post.authors.map((author, i) => (\n                                                        <>\n                                                            {i > 0 ? `, ` : ``}\n                                                            <Link key={i} to={resolveUrl(basePath, `/`, author.slug, author.url)}>{author.name}</Link>\n                                                        </>\n                                                    ))}\n                                                </h4>\n                                                <div className=\"byline-meta-content\">\n                                                    <time className=\"byline-meta-date\" dateTime={post.published_at}>\n                                                        {post.published_at_pretty}&nbsp;\n                                                    </time>\n                                                    <span className=\"byline-reading-time\"><span className=\"bull\">&bull;</span> {readingTime}</span>\n                                                </div>\n                                            </section>\n                                        </section>\n                                    </div>\n                                </header>\n\n                                { featImg &&\n                                    <figure className=\"post-full-image\">\n                                        <ImgSharp fluidClass=\"kg-card kg-code-card\" fluidImg={fluidFeatureImg} srcImg={featImg} title={post.title}/>\n                                    </figure>\n                                }\n\n                                <section className=\"post-full-content\">\n                                    <TableOfContents toc={toc} url={resolveUrl(basePath, pageContext.collectionPaths[post.id], post.slug, post.url)}/>\n                                    <RenderContent htmlAst={htmlAst} html={transformedHtml || post.html} />\n                                </section>\n\n                                <S9comment />\n\n                            </article>\n                        </div>\n                    </Layout>\n                )}/>\n            )}/>\n        </React.Fragment>\n    )\n}\n\nPost.propTypes = {\n    data: PropTypes.shape({\n        ghostPost: PropTypes.object.isRequired,\n        prev: PropTypes.object,\n        next: PropTypes.object,\n        allGhostPost: PropTypes.object.isRequired,\n    }).isRequired,\n    location: PropTypes.object.isRequired,\n    pageContext: PropTypes.object,\n}\n\nexport default Post\n\nexport const postQuery = graphql`\n    query($slug: String!, $prev: String!, $next: String!, $tag: String!, $limit: Int!, $skip: Int!) {\n        ghostPost: ghostPost(slug: { eq: $slug }) {\n            ...GhostPostFields\n        }\n        prev: ghostPost(slug: { eq: $prev }) {\n            ...GhostPostFieldsForIndex\n        }\n        next: ghostPost(slug: { eq: $next }) {\n            ...GhostPostFieldsForIndex\n        }\n        allGhostPost(\n            filter: {slug: { ne: $slug },tags: {elemMatch: {slug: {eq: $tag}}}},\n            limit: $limit,\n            skip: $skip,\n            sort: { fields: [featured, published_at], order: [DESC, DESC] }\n        ) {\n            edges {\n                node {\n                ...GhostPostFieldsForIndex\n                }\n            }\n        }\n    }\n`\n"],"sourceRoot":""}